[{"content":"前言 在使用 PageSpeed Insights 时 blog 的分数是 62，一看 html 文件发现大量空行。\n 开始解决 $ npm install hexo-html-minifier --save 安装 hexo 插件，Github。\n在站点 _config.yml ,里添加\nhtml_minifier:exclude:查看 html 文件。\n   \n搞定！\n","date":"2020-12-15T22:23:55Z","permalink":"https://zhixuan666.github.io/posts/44e9e030/","title":"解决 hexo 大量空行"},{"content":"Github Actions Github Actions 是 GitHub 官方 CI 工具，与 GitHub 无缝集成。\n{% note info %}\nCI/CD (continuous integration and continuous deployment)\n{% endnote %}\n 准备 github repo 在本地建立一个Hexo站点，可以参考官方快速开始文档。\n建立两个GitHub仓库。\n 存储博客源文件 可以是私有的 挂载GitHub Pages。  在 blog 根目录下添加 .gitignore 文件，添加\n.DS_Store Thumbs.db *.log node_modules/ public/ .deploy*/ 将本地的博客源文件推送到 github 仓库。\n准备秘钥 生成 ssh 部署私钥\n$ ssh-keygen -t rsa -b 4096 -C \u0026#34;$(git config user.email)\u0026#34; -f github-deploy-key -N \u0026#34;\u0026#34; GitHub Pages 的 repo 里的 Settings/Deploy keys 中添加刚刚生成的公钥 Title 随便 值为刚刚生成的公钥 github-deploy-key.pub\n存储博客源文件 的 repo 里的 Settings/Secrets 中添加 DEPLOY_KEY，值为刚刚生成的私钥 github-deploy-key\n{% note warning %}\n注意：切记不要多复制空格!!!\n切记要勾选 Allow write access，否则会出现无法部署的情况。\n{% endnote %}\n配置 Hexo 的 _config.yml 添加部署配置。\n# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type:gitrepo:git@github.com:xxxx/xxxx.git# 使用仓库的ssh地址branch:master配置 GitHub Actions 在 blog 的根目录下新建 .github/workflow/deploy.yml ，编写如下配置。\nname:Deployon:[push]jobs:build:runs-on:ubuntu-latestname:A job to deploy blog.steps:- name:Checkoutuses:actions/checkout@v1with:submodules:true- name:Cache node modulesuses:actions/cache@v1id:cachewith:path:node_moduleskey:${{ runner.os }}-node-${{ hashFiles(\u0026#39;**/package-lock.json\u0026#39;) }}restore-keys:|${{ runner.os }}-node-- name:Install Dependenciesif:steps.cache.outputs.cache-hit != \u0026#39;true\u0026#39;run:npm ci- name:Deployid:deployuses:sma11black/hexo-action@v1.0.3with:deploy_key:${{ secrets.DEPLOY_KEY }}- name:Get the outputrun:|echo \u0026#34;${{ steps.deploy.outputs.notify }}\u0026#34; PUSH!!!  验证 现在 Hexo 已经和 GitHub Actions 已经集成了，接下来在博客源码分支上推送代码即可自动编译部署。具体 执行过程可以在 Actions 中查看：\n \n感谢及参考  🔗GitHub Action Hexo Deploy  ","date":"2020-12-10T20:28:51Z","permalink":"https://zhixuan666.github.io/posts/61c57a03/","title":"GitHub Actions 自动化部署 Hexo"},{"content":"安装说明 Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10\nDOCKER官网\n 安装docker 删除旧版 docker $ sudo yum remove docker \\  docker-client \\  docker-client-latest \\  docker-common \\  docker-latest \\  docker-latest-logrotate \\  docker-logrotate \\  docker-engine 安装新版 docker $ sudo yum install -y yum-utils $ sudo yum-config-manager \\  --add-repo \\  https://download.docker.com/linux/centos/docker-ce.repo $ sudo yum install docker-ce docker-ce-cli containerd.io 防火墙 $ sudo firewall-cmd --permanent --zone=trusted --add-interface=docker0 $ sudo firewall-cmd --reload 开启docker $ sudo systemctl start docker 设置开机自启动 $ sudo systemctl enable docker  建立 docker 用户组 默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组。\n建立 docker 组：\n$ sudo groupadd docker 复制代码将当前用户加入 docker 组：\n$ sudo usermod -aG docker $USER 测试 Docker 是否安装正确 $ docker run hello-world  镜像加速 鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，强烈建议安装 Docker 之后配置 国内镜像加速。 修改配置文件 /etc/docker/daemon.json ，添加主机 DNS 服务器后重启 Docker 守护进程（如果文件不存在请新建该文件）\n{ \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://registry.docker-cn.com\u0026#34; ] } daemon.json 说明\n 重新启动服务 $ sudo systemctl daemon-reload $ sudo systemctl restart docker  发现问题 测试是否是DNS解析出错，测试命令如下：\n$ docker run busybox nslookup baidu.com nslookup: write to \u0026#39;127.0.1.1\u0026#39;: Connection refused ;; connection timed out; no servers could be reached 没有设置 DNS\n如果启用 防火墙\nDNS 修改配置文件 /etc/docker/daemon.json ，添加主机 DNS 服务器后重启 Docker 守护进程（如果文件不存在请新建该文件）\n{ \u0026#34;dns\u0026#34;: [\u0026#34;8.8.8.8\u0026#34;, \u0026#34;1.1.1.1\u0026#34;] }  感谢及参考  🔗docker 🔗daemon.json 说明  ","date":"2020-11-28T18:20:08Z","permalink":"https://zhixuan666.github.io/posts/4064fc4/","title":"Centos 安装 docker"},{"content":"前言 最近因为电脑性能不够，想在 wsl 上来搭建 code-server 结果无法启动 ssh 服务\n 安装 ssh $ sudo apt-get remove openssh-server $ sudo apt-get install openssh-server 编辑配置文件 $ sudo vi /etc/ssh/sshd_config  Port 22 # 默认即可，如果有端口占用可以自己修改 PasswordAuthentication yes # 允许用户名密码方式登录\n 重启服务 $ sudo service ssh restart 现在可以使用客户端连接 wsl 了。\n","date":"2020-11-22T16:41:05Z","permalink":"https://zhixuan666.github.io/posts/e0320a75/","title":"使用 ssh 工具连接到 wsl"},{"content":"使用 hmac-sha256 验证签名 func CheckMAC(message, messageMAC, key []byte) bool { mac := hmac.New(sha256.New, key) mac.Write(message) expectedMAC := mac.Sum(nil) return hmac.Equal(messageMAC, expectedMAC) }  ","date":"2020-11-07T22:14:34Z","permalink":"https://zhixuan666.github.io/posts/69e3a2bc/","title":"golang hmac-sha256 验证签名"},{"content":"简介 一个主题，三种外观，选您所好 通过主题中的主题（亦称 Scheme），您可以方便地改变您博客的外观，同时几乎所有配置同样适用  \n custom.styl 文件 在新版 Next 中 custom.styl 文件改为 blog/source/_data/styles.styl\n在 主题配置文件 中:\ncustom_file_path:#head: source/_data/head.njk#header: source/_data/header.njk#sidebar: source/_data/sidebar.njk#postMeta: source/_data/post-meta.njk#postBodyEnd: source/_data/post-body-end.njk#footer: source/_data/footer.njk#bodyEnd: source/_data/body-end.njk#variable: source/_data/variables.styl#mixin: source/_data/mixins.stylstyle:source/_data/styles.styl 美化  点击爱心效果 点击烟花爆炸效果 浏览器网页标题恶搞 背景图片  背景图片 创建 blog/source/_data/styles.styl 在 styles.styl 文件中添加以下代码:\nbody{ background:url(图片链接); background-size:cover; background-repeat:no-repeat; background-attachment:fixed; background-position:center; } 其中的css样式属性都可以根据你的自定义图片来更改，以达到最佳的效果。\n如果没效果 关于styles.styl\n 点击爱心效果 在 /themes/next/source/js 下新建文件 love.js，在 love.js 文件中添加以下代码:\n!function(e,t,a){function n(){c(\u0026#34;.heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: \u0026#39;\u0026#39;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\u0026#34;),o(),r()}function r(){for(var e=0;e\u0026lt;d.length;e++)d[e].alpha\u0026lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\u0026#34;left:\u0026#34;+d[e].x+\u0026#34;px;top:\u0026#34;+d[e].y+\u0026#34;px;opacity:\u0026#34;+d[e].alpha+\u0026#34;;transform:scale(\u0026#34;+d[e].scale+\u0026#34;,\u0026#34;+d[e].scale+\u0026#34;) rotate(45deg);background:\u0026#34;+d[e].color+\u0026#34;;z-index:99999\u0026#34;);requestAnimationFrame(r)}function o(){var t=\u0026#34;function\u0026#34;==typeof e.onclick\u0026amp;\u0026amp;e.onclick;e.onclick=function(e){t\u0026amp;\u0026amp;t(),i(e)}}function i(e){var a=t.createElement(\u0026#34;div\u0026#34;);a.className=\u0026#34;heart\u0026#34;,d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(\u0026#34;style\u0026#34;);a.type=\u0026#34;text/css\u0026#34;;try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\u0026#34;head\u0026#34;)[0].appendChild(a)}function s(){return\u0026#34;rgb(\u0026#34;+~~(255*Math.random())+\u0026#34;,\u0026#34;+~~(255*Math.random())+\u0026#34;,\u0026#34;+~~(255*Math.random())+\u0026#34;)\u0026#34;}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document); 在 \\themes\\next\\layout\\layout.njk 文件末尾添加以下代码:\n\u0026lt;!-- 页面点击小红心 --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;/js/love.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;  \n 点击烟花爆炸效果 在 \\themes\\next\\source\\js 目录下新建一个 fireworks.js 的文件，里面写入以下代码:\n\u0026#34;use strict\u0026#34;;function updateCoords(e){pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top}function setParticuleDirection(e){var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return{x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)}}function createParticule(e,t){var a={};return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function(){ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()},a}function createCircle(e,t){var a={};return a.x=e,a.y=t,a.color=\u0026#34;#F00\u0026#34;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function(){ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1},a}function renderParticule(e){for(var t=0;t\u0026lt;e.animatables.length;t++){e.animatables[t].target.draw()}}function animateParticules(e,t){for(var a=createCircle(e,t),n=[],i=0;i\u0026lt;numberOfParticules;i++){n.push(createParticule(e,t))}anime.timeline().add({targets:n,x:function(e){return e.endPos.x},y:function(e){return e.endPos.y},radius:0.1,duration:anime.random(1200,1800),easing:\u0026#34;easeOutExpo\u0026#34;,update:renderParticule}).add({targets:a,radius:anime.random(80,160),lineWidth:0,alpha:{value:0,easing:\u0026#34;linear\u0026#34;,duration:anime.random(600,800)},duration:anime.random(1200,1800),easing:\u0026#34;easeOutExpo\u0026#34;,update:renderParticule,offset:0})}function debounce(e,t){var a;return function(){var n=this,i=arguments;clearTimeout(a),a=setTimeout(function(){e.apply(n,i)},t)}}var canvasEl=document.querySelector(\u0026#34;.fireworks\u0026#34;);if(canvasEl){var ctx=canvasEl.getContext(\u0026#34;2d\u0026#34;),numberOfParticules=30,pointerX=0,pointerY=0,tap=\u0026#34;mousedown\u0026#34;,colors=[\u0026#34;#FF1461\u0026#34;,\u0026#34;#18FF92\u0026#34;,\u0026#34;#5A87FF\u0026#34;,\u0026#34;#FBF38C\u0026#34;],setCanvasSize=debounce(function(){canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+\u0026#34;px\u0026#34;,canvasEl.style.height=window.innerHeight+\u0026#34;px\u0026#34;,canvasEl.getContext(\u0026#34;2d\u0026#34;).scale(2,2)},500),render=anime({duration:1/0,update:function(){ctx.clearRect(0,0,canvasEl.width,canvasEl.height)}});document.addEventListener(tap,function(e){\u0026#34;sidebar\u0026#34;!==e.target.id\u0026amp;\u0026amp;\u0026#34;toggle-sidebar\u0026#34;!==e.target.id\u0026amp;\u0026amp;\u0026#34;A\u0026#34;!==e.target.nodeName\u0026amp;\u0026amp;\u0026#34;IMG\u0026#34;!==e.target.nodeName\u0026amp;\u0026amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))},!1),setCanvasSize(),window.addEventListener(\u0026#34;resize\u0026#34;,setCanvasSize,!1)}\u0026#34;use strict\u0026#34;;function updateCoords(e){pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top}function setParticuleDirection(e){var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return{x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)}}function createParticule(e,t){var a={};return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function(){ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()},a}function createCircle(e,t){var a={};return a.x=e,a.y=t,a.color=\u0026#34;#F00\u0026#34;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function(){ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1},a}function renderParticule(e){for(var t=0;t\u0026lt;e.animatables.length;t++){e.animatables[t].target.draw()}}function animateParticules(e,t){for(var a=createCircle(e,t),n=[],i=0;i\u0026lt;numberOfParticules;i++){n.push(createParticule(e,t))}anime.timeline().add({targets:n,x:function(e){return e.endPos.x},y:function(e){return e.endPos.y},radius:0.1,duration:anime.random(1200,1800),easing:\u0026#34;easeOutExpo\u0026#34;,update:renderParticule}).add({targets:a,radius:anime.random(80,160),lineWidth:0,alpha:{value:0,easing:\u0026#34;linear\u0026#34;,duration:anime.random(600,800)},duration:anime.random(1200,1800),easing:\u0026#34;easeOutExpo\u0026#34;,update:renderParticule,offset:0})}function debounce(e,t){var a;return function(){var n=this,i=arguments;clearTimeout(a),a=setTimeout(function(){e.apply(n,i)},t)}}var canvasEl=document.querySelector(\u0026#34;.fireworks\u0026#34;);if(canvasEl){var ctx=canvasEl.getContext(\u0026#34;2d\u0026#34;),numberOfParticules=30,pointerX=0,pointerY=0,tap=\u0026#34;mousedown\u0026#34;,colors=[\u0026#34;#FF1461\u0026#34;,\u0026#34;#18FF92\u0026#34;,\u0026#34;#5A87FF\u0026#34;,\u0026#34;#FBF38C\u0026#34;],setCanvasSize=debounce(function(){canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+\u0026#34;px\u0026#34;,canvasEl.style.height=window.innerHeight+\u0026#34;px\u0026#34;,canvasEl.getContext(\u0026#34;2d\u0026#34;).scale(2,2)},500),render=anime({duration:1/0,update:function(){ctx.clearRect(0,0,canvasEl.width,canvasEl.height)}});document.addEventListener(tap,function(e){\u0026#34;sidebar\u0026#34;!==e.target.id\u0026amp;\u0026amp;\u0026#34;toggle-sidebar\u0026#34;!==e.target.id\u0026amp;\u0026amp;\u0026#34;A\u0026#34;!==e.target.nodeName\u0026amp;\u0026amp;\u0026#34;IMG\u0026#34;!==e.target.nodeName\u0026amp;\u0026amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))},!1),setCanvasSize(),window.addEventListener(\u0026#34;resize\u0026#34;,setCanvasSize,!1)}; 然后在 \\themes\\next\\layout\\layout.njk 文件中写入以下代码:\n\u0026lt;canvas class=\u0026#34;fireworks\u0026#34; style=\u0026#34;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;\u0026#34; \u0026gt;\u0026lt;/canvas\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;/js/fireworks.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 如果没加载animejs:\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;//cdn.jsdelivr.net/npm/animejs@2.2.0\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;  \n  浏览器网页标题恶搞 当用户访问你的博客时点击到了其他网页，我们可以恶搞一下网页标题，呼唤用户回来，首先在目录 \\themes\\next\\source\\js 下新建一个 FunnyTitle.js 文件，在里面填写如下代码:\n\u0026lt;!--浏览器搞笑标题--\u0026gt; var OriginTitle = document.title; var titleTime; document.addEventListener(\u0026#39;visibilitychange\u0026#39;, function () { if (document.hidden) { $(\u0026#39;[rel=\u0026#34;icon\u0026#34;]\u0026#39;).attr(\u0026#39;href\u0026#39;, \u0026#34;/img/failure.ico\u0026#34;); document.title = \u0026#39;ヽ(●-`Д´-)ノ你丑你就走！\u0026#39;; clearTimeout(titleTime); } else { $(\u0026#39;[rel=\u0026#34;icon\u0026#34;]\u0026#39;).attr(\u0026#39;href\u0026#39;, \u0026#34;/img/favicon.png\u0026#34;); document.title = \u0026#39;(/≧▽≦/)咦！又好了 \u0026#39; + OriginTitle; titleTime = setTimeout(function () { document.title = OriginTitle; }, 2000); } }); 然后在 \\themes\\next\\layout\\layout.njk 文件中添加如下代码:\n\u0026lt;!--浏览器搞笑标题--\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;\\js\\FunnyTitle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; failure.ico下载地址\n   \n 添加本站运行时间 在目录 \\themes\\next\\source\\js 下新建一个 blog-run-time.js 文件，在里面填写如下代码:\nfunction show_date_time(){ window.setTimeout(\u0026#34;show_date_time()\u0026#34;, 1000); BirthDay=new Date(\u0026#34;09/13/2020 0:0:0\u0026#34;);//修改为自己的blog建站时间  today=new Date(); timeold=(today.getTime()-BirthDay.getTime()); sectimeold=timeold/1000 secondsold=Math.floor(sectimeold); msPerDay=24*60*60*1000 e_daysold=timeold/msPerDay daysold=Math.floor(e_daysold); e_hrsold=(e_daysold-daysold)*24; hrsold=setzero(Math.floor(e_hrsold)); e_minsold=(e_hrsold-hrsold)*60; minsold=setzero(Math.floor((e_hrsold-hrsold)*60)); seconds=setzero(Math.floor((e_minsold-minsold)*60)); document.getElementById(\u0026#39;days\u0026#39;).innerHTML=\u0026#34;本站已运行\u0026#34;+daysold+\u0026#34;天\u0026#34;+hrsold+\u0026#34;小时\u0026#34;+minsold+\u0026#34;分\u0026#34;+seconds+\u0026#34;秒\u0026#34;; } function setzero(i){ if (i\u0026lt;10) {i=\u0026#34;0\u0026#34; + i}; return i; } show_date_time(); 然后在 \\themes\\next\\layout\\_partials\\footer.njk 文件中在 {{- next_inject('footer') }} 前添加如下代码:\n\u0026lt;div id=\u0026#34;days\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;/js/blog-run-time.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;  \n ~ ~ 持续更新 ~ ~ ","date":"2020-10-31T22:07:14Z","permalink":"https://zhixuan666.github.io/posts/bf8435b4/","title":"Hexo Next 美化"},{"content":"前言 此工具使用 IDM + 在线解析 博主的下载速度 16MB\n自从大名鼎鼎的pandownload被ban之后，其实陆续出现了很多这一类工具，当时因为有会员在手，所以只是做观望，什么亿寻、速盘、PDown之类的都是前仆后继，各领风骚，可见百度网盘受欢迎的程度。\n 安装IDM IDM下载\n 云解析下载地址 KinhDownload网页版\n使用起来也不用我多说了，大家都熟悉\n分别复制粘贴网盘分享链接和提取码即可\n接着我们点击要下载的文件，会打开一个已解析的页面\n \n 修改一下IDM的UA（即User-Agent）\n具体如下：\n1.首先打开IDM选项，接着找到下载——UA\n \n最后，将UA设置成 显示的User-Agent ，点击确定即可\n \n 如果想要设置回来，复制以下一段，就能更改回默认\nMozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko\n复制 URL 进到IDM中下载。\n \nOK!\n","date":"2020-10-10T10:13:54Z","permalink":"https://zhixuan666.github.io/posts/9c894058/","title":"百度网盘在线解析 不限速高速下载"},{"content":"简介 Valine 诞生于2017年8月7日，是一款基于 LeanCloud 的快速、简洁且高效的无后端评论系统。\n理论上支持但不限于静态博客，目前已有 Hexo 、 Jekyll 、 Typecho 、 Hugo 、 Ghost 等博客程序在使用Valine。\n{% note warning %}\n本篇是 Hexo 的 Next8.0 主题的valine美化\n{% endnote %}\n 启用 valine 访问 leancloud，传送门 国际版 中国版 需要 实名 和 备案\n注册并登录，选择创建应用，名称随便写，创建。\n \n打开设置 -\u0026gt; 安全中心 -\u0026gt; Web安全域名 -\u0026gt; 添加博客域名\n \n到应用Keys，复制 AppID 和 AppKey。\n \n打开 主题配置文件 ，找到valine。\nvaline:enable:trueappId:#刚刚复制的appIDappKey:#刚刚复制的appKeyplaceholder:在这里输入评论# 评论框 ```占位提示符```` 。avatar:wavatar # Gravatar 头像展示方式。meta:[nick, mail, link]# 评论者相关属性。pageSize:10# 评论列表分页，每页条数。lang:zh-cn# 语言 zh-CN, zh-TW, en, javisitor:true# 记录访问次数comment_count:# 是否统计评论个数recordIP:# 是否记录ipserverURLs:# api地址enableQQ:false# 是否启用QQ登入requiredFields:[nick, mail]# 设置必填项 [nick,mail,link]此时以可以用valine\n{% note danger %}\n如果只是出现valine不能评论的话 按 F12 如果在 bash 出现 ERR:: TIME_OUT\n \n如果是国际版，修改valine\nvaline:enable:true···serverURLs:https://APPID的前八位.api.lncldglobal.com/···{% endnote %}\n 美化 valine 在 veditor 输入界面增加背景图  \n使用方法如下，将 CSS 加到 themes\\next\\layout\\_third-party\\comments\\valine.njk。\n#veditor { background-image: url(https://cdn.jsdelivr.net/gh/drew233/cdn/20200409110727.webp); background-size: contain; background-repeat: no-repeat; background-position: right; background-color: rgba(255, 255, 255, 0); resize: vertical } 上述的 url 内的图片可以换成自己的。如果评论者在输入框中输入较长的内容，那么背景图会遮住部分文字，这样引起整体观感欠佳。设置当鼠标聚焦于输入框时，背景图消失，输入框失去焦点时，背景图重新显示，这个逻辑可以直接交给 CSS 完成。\n#veditor:focus{ background-position-y: 200px; transition: all 0.2s ease-in-out 0s; } 将 nick、email、link 输入框分开 这个就根据自己改了。\n \n使用前请确保 Valine 评论的 div 的 id 是 vcomments，即 \u0026lt;div id=\u0026quot;vcomments\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; 如果是 class 为 vcomments ，那么将以下的 # 换成 . 即可。\n#vcomments .vheader .vnick { width: 31%; border: 2px solid #dedede; padding-left: 10px; padding-right: 10px; border-radius: 5px } #vcomments .vheader .vmail { width: 31%; border: 2px solid #dedede; margin-left: 34px; padding-left: 10px; padding-right: 10px; border-radius: 5px } #vcomments .vheader .vlink { width: 31%; border: 2px solid #dedede; margin-left: 34px; padding-left: 10px; padding-right: 10px; border-radius: 5px } 头像旋转 img.vimg { transition: all 1s /* 旋转时间为 1s */ } img.vimg:hover { transform: rotate(360deg); -webkit-transform: rotate(360deg); -moz-transform: rotate(360deg); -o-transform: rotate(360deg); -ms-transform: rotate(360deg); } 卡片式评论 #vcomments .vcards .vcard { padding: 15px 20px 0 20px; border-radius: 10px; margin-bottom: 15px; box-shadow: 0 0 4px 1px rgba(0, 0, 0, .12); transition: all .3s } #vcomments .vcards .vcard:hover { box-shadow: 0 0 8px 3px rgba(0, 0, 0, .12) } #vcomments .vcards .vcard .vh .vcard { border: none; box-shadow: none; } 增加博主、小伙伴标识以及浏览器图标 这个原生的 Valine 就不支持了，我们需要使用魔改的 Valine 文件。\n修改 主题配置文件 找到 vendors\nvendors:···# Valinevaline://cdn.jsdelivr.net/gh/HCLonely/Valine@latest/dist/Valine.min.js···与原生的相比，多了以下功能：\n 添加博主，小伙伴，访客标签 添加浏览器和操作系统图标，需引入 fontawesome v5.0+ 的 CSS 样式 邮箱检测更严格 增加 QQ 邮箱识别（原版只能通过昵称栏输入 QQ 号识别） meta placeholder 可自定义  修改 主题配置文件 找到 valine\nvaline:enable:true···tagMeta:[\u0026#34;博主\u0026#34;,\u0026#34;小伙伴\u0026#34;,\u0026#34;访客\u0026#34;]# 标签要显示的文字master:[\u0026#34;fe01ce2a7fbac8fafaed7c982a04e229\u0026#34;]# md5 加密后的博主邮箱 逗号隔开friends:[\u0026#34;fe01ce2a7fbac8fafaed7c982a04e229\u0026#34;]# md5 加密后的小伙伴邮箱 逗号隔开metaPlaceholder:{\u0026#34;nick\u0026#34;:\u0026#34;昵称\u0026#34;,\u0026#34;mail\u0026#34;:\u0026#34;邮箱(必填)\u0026#34;}# meta placeholder 内容verify:false# 评论时是否需要验证，需 jQuery 支持","date":"2020-09-27T10:05:32Z","permalink":"https://zhixuan666.github.io/posts/b17cfc64/","title":"Hexo NexT 魔改 valine"},{"content":"前言 Minecraft即我的世界，手头有闲置服务器的玩家算是有福了，可以自己搭建服务器，当然这片教程也适用于家庭，只不过需求可能有丶高。\n{% note info %}\n本篇教程仅说明如何在Linux下搭建，全程使用root用户，使用的发行版是Debian9.5，同时适用于Ubuntu和其他的Debian系Linux使用，RHEL仅部分命令不同，其他也是相同的。\n{% endnote %}\n 搭建Minecraft服务器 安装 Java 和 Screen Ubuntu和其他的Debian系Linux的命令\n$ sudo apt-get update $ sudo apt-get install java screen -j RHEL的命令\n$ sudo yum update $ sudo yum install java screen -y 创建一个目录存放服务端的文件 $ cd / #进入根目录 $ sudo mkdir mcserver #创建mcserver文件夹 $ cd /mcserver #进入mcserver文件夹  搭建 forge 服务器请到 搭建forge服务器\n 搭建非forge服务器 去 MCversions 下载\n \n右键你想要的版本的 Server Jar ，复制链接，到终端。\nwget 粘贴刚刚复制到链接 下载好了之后，启动服务器：\njava -Xms512M -Xmx1024M -jar server.jar -nogui {% note info %}\n第一次需要修改 EULA 文件\nvim eula.txt 将eula=false改成eula=true，再次输入指令。\n搭建成功 {% endnote %}\n 关于配置文件\n 搭建forge服务器 去 MinecraftForge 下载\n \n左边是版本，中间是最新版，右边是稳定版，我们这边下载稳定版。 右键复制链接，到终端。\nwget 粘贴刚刚复制到链接 java -jar forge-*****-install.jar -nogui --installServer 等待安装， ls 看到多几个文件我们输入：\njava -Xms512M -Xmx1024M -jar forge-*****-universal.jar -nogui {% note info %}\n第一次需要修改 EULA 文件\nvim eula.txt 将eula=false改成eula=true，再次输入指令。\n搭建成功 {% endnote %}\n{% note info %}\n如何添加MOD 将下载好的mod放在，mods文件夹中，重启服务器。\n{% endnote %}\n 配置文件 server.properties 我觉得有用的conf\nenable-command-block=true #启用命令方块 query.port=25565 #服务器的端口 pvp=false #关闭PVP online-mode=false #启用盗版 ","date":"2020-09-21T21:21:52Z","permalink":"https://zhixuan666.github.io/posts/2b678319/","title":"linux搭建Minecraft服务器"},{"content":"什么是Hexo？ Hexo 是高效的静态站点生成框架，它基于 Node.js 。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。\n 安装Hexo 安装前提 安装 Hexo 非常简单。但在安装之前，您必须检查电脑中是否已安装下列应用程序:\n{% note default %}\n Node.js Git  {% endnote %}\n安装 Git {% note info %}\nWindows 用户 直接在 官网 下 Git 很慢, 可以通过 这个网页 下载\n{% endnote %}\n安装完 Git 后，右键打开 Git Bash Here ，输入 git --version ,出现版本信息就说明安装成功了。\nzhixuan@DESKTOP-2MMI2OK MINGW64 /d/desktop $ git --version git version 2.28.0.windows.1 安装Node.js 接下来安装 Node.js ，在 官网 下载即可。\n在命令行输入 node -v 和 npm -v ，出现以下信息说明成功了。\nMicrosoft Windows [版本 10.0.18363.1082] (c) 2019 Microsoft Corporation。保留所有权利。 C:\\Users\\zhixuan\u0026gt;node -v v12.18.3 C:\\Users\\zhixuan\u0026gt;npm -v 6.14.6 安装Hexo 如果你的电脑中已经安装上述必备程序，那么恭喜你！只需要使用 npm 即可完成 Hexo 的安装。\n$ npm install -g hexo-cli 安装 Hexo 完成后，我们首先需要为我们的项目创建一个 指定文件夹 (例如我在 D 盘目录下创建了一个文件夹 blog D:\\blog )，在指定文件夹中执行下列命令， Hexo 将会在指定文件夹中新建所需要的文件。\n$ hexo init 等待安装，安装后，blog 的目录如下。\n. ├── _config.yml ├── package.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── 我们继续执行命令\n$ hexo g $ hexo s --debug {% note success %}\nHexo 将 source 文件夹中除 posts 文件夹之外，开头命名为 (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件夹会被拷贝过去。 这个时候，我们在浏览器中访问 http://localhost:4000/ ，就可以看到基于 Hexo 的默认主题的原型：\n{% endnote %}\n \n 安装Next主题 下载Next主题 依旧是在当前目录下，使用 Git 来 checkout 代码：\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next {% note danger %}\n提示：原作者 iissnan 已经停止更新 hexo-theme-next ；所以，如果你想使用 5.x 之前的版本可以使用上面的链接下载 NexT 主题；如果你想体验 6.x 之后的新版本，请使用下面的链接\n{% endnote %}\n7.8\n$ git clone https://github.com/theme-next/hexo-theme-next themes/next 8.0\n$ git clone https://github.com/next-theme/hexo-theme-next themes/next 等待下载完成。\n{% note warning %}\n在 Hexo 中有两份重要的配置文件，两份都是 _config.yml 。其中一份在站点的根目录下，主要包含 Hexo 本身的配置; 另外一份位于主题目录下，这份主要用于配置主题相关的配置 前置叫 站点配置文件 ,后者叫 主题配置文件。\n{% endnote %}\n启用Next主题 打开 站点配置文件 ，Ctrl+F 找到 theme 字段，并将其更改为 next。\n到此， Next 主题安装完毕。\n验证主题 首先启动 Hexo 本地站点。\n$ hexo g $ hexo s 当命令行输出中提示。\nINFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 此时即可使用游览器访问 http://localhost:4000/ , 检查站点是否正确运行。\n{% note success %}\n当你看到站点的外观与下图类似就说明你成功安装 Next 主题。这是 Next 默认的 Scheme。\n{% endnote %}\n \n现在，我们已经成功安装 Next 主题。\n{% note info %}\n关于更多基本操作和基础知识，请查阅 Hexo 与 NexT 官方文档.\n{% endnote %}\n Github设置 我们需要在 Github 上创建一个仓库来托管我们的站点。\n创建仓库 打开 Github，创建 New repository ，这里要注意仓库名一定要 your Account Name/github.io ，这样才能正常显示。\n \n然后在 Settings 中，向下拉有个 Github Pages ，点击 Choose a theme 选择一个主题，我选选的是 Cayman，最后图中这个 https://你的用户名.github.io 就是创建网站的网址了。\n \n连接Github与本地 打开 Git Bash ，设置 user.name 和 user.email 配置信息：\n\u0026amp; git config --global user.name \u0026#34;你的GitHub用户名\u0026#34; \u0026amp; git config --global user.email \u0026#34;你的GitHub注册邮箱\u0026#34; 让后生成SSH KEY：\n\u0026amp; ssh-keygen -t rsa -C \u0026#34;你的GitHub注册邮箱\u0026#34; 让后三个回车即可。找到 /user/.ssh 文件夹中的 id_rsa.pub 密钥，将内容全部复制。 打开 Github_Settings_Keys 页面，新建 new_ssh Key Title 为标题，任意即可，将刚才复制的 id_rsa.pub 内容粘贴进去，最后点击 Add SSH KEY。 在 Git Bash 中检测 Github 公钥设置是否成功，输入：\n\u0026amp; ssh git@github.com 若看到以下结果，则说明成功了。  \n 博客初始配置 配置Deployment 打开 站点配置文件 ，找到 Deployment ，然后按照如下修改：\ndeploy:type:gitrepo:你的仓库地址branch:master完成以上配置后保存，让后在 站点根目录 下打开命令行，执行以下指令安装所需插件：\n\u0026amp; npm install hexo-deployer-git --save 继续输入 hexo d ，会冒出一个 Github 窗口让你登录。\n \n完成之后，你可以在 用户名.github.io 就能看到你的博客了。\n发布新文章 命令行 在 站点根目录 下打开命令行，输入：\nhexo n \u0026quot;article title\u0026quot; INFO Created: D:\\Blog\\source\\_posts\\article-title.md 反馈信息显示在你的 source/_posts 下生成了一个 article-title.md 文件，在这个文件中即可编写自己的博客了。\n直接新建md文件 直接的方式就是直接在 source/_posts 新建一个 Markdown 文件，其实和命令形式是一个道理，就看哪个自己用起来方便些。\n 总结 本地调试步骤 三部曲:\n\u0026amp; hexo clean $ hexo g $ hexo s --debug 这种带 debug 的运行，如果出现错误，可以在命令行中看到错误提示信息。\n部署步骤 三部曲:\n\u0026amp; hexo clean \u0026amp; hexo g \u0026amp; hexo d 常用命令 $ hexo n \u0026#34;postName\u0026#34; # 新建文章 $ hexo n page \u0026#34;pageName\u0026#34; # 新建页面 $ hexo g # 生成静态页面至public目录 $ hexo s # 开启预览访问端口(默认端口4000，\u0026#39;ctrl+c\u0026#39;关闭server) $ hexo d # 项目部署 $ hexo help # 查看帮助 $ hexo version # 查看Hexo的版本 常见问题 在 hexo 的配置和设置文件中，在冒号后面没留空格会导致出问题： 错误的设置：\nauthor:zhixuanemail:jinzhixuan666@gmail.comlanguage:zh-CN正确的设置：\nauthor:zhixuanemail:jinzhixuan666@gmail.comlanguage:zh-CN 感谢及参考  🔗GitHub+Hexo+Next搭建博客  ","date":"2020-09-17T22:16:10Z","permalink":"https://zhixuan666.github.io/posts/cfdb546a/","title":"Github+Hexo+Next搭建博客"},{"content":"前言 通常 Windows Server 不会配有 RDP 证书，我们连接的时候会看到证书警告。\n 安装远程证书 安装p12或pfx格式的证书 连接到 Windows Server，双击证书，存储位置选择「本地计算机」 \u0026gt; 文件名默认 \u0026gt; 输入密码 \u0026amp; 其他设置默认 \u0026gt; 选择「将所有的证书都放入下列存储 - 个人」\u0026gt; 完成。\n \n获取证书 Hash 获取证书Hash，Win + R \u0026gt; certlm.msc , 在 证书 - 本地计算机 \u0026gt; 个人 \u0026gt; 证书 ，双击刚安装的证书 \u0026gt; 详细信息 \u0026gt; 指纹。\n \n \n 配置 RDP 服务 以管理员模式打开 Windows Powershell，执行以下指令：\nwmic /namespace:\\\\root\\cimv2\\TerminalServices PATH Win32_TSGeneralSetting Set SSLCertificateSHA1Hash=\u0026#34;\u0026lt;上面获取的证书指纹\u0026gt;\u0026#34;  \n提示「属性更新成功」即可。\n 测试连接 断开远程桌面连接，重新连接，此时应该已经没有证书未受信任的提示了。\n \n 移除服务器证书 如果要移除服务器上安装的证书，Win + R \u0026gt; certlm.msc , 在 证书 - 本地计算机 \u0026gt; 个人 \u0026gt; 证书， 下删除安装的证书即可。\n \n 感谢及参考  🔗简单的给远程桌面连接 (Remote Desktop) 配置自定义 SSL 证书  ","date":"2020-09-14T19:02:59Z","permalink":"https://zhixuan666.github.io/posts/af239327/","title":"Windows导入远程证书"}]